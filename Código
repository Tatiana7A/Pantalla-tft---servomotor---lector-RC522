#include <deprecated.h>
#include <MFRC522.h>
#include <MFRC522Extended.h>
#include <require_cpp11.h>
#include <SPI.h>
#include <MFRC522.h>
#include <Servo.h>
#include <Adafruit_GFX.h>    // Core graphics library
#include <Adafruit_ST7735.h> // Hardware-specific library for ST7735

#define SS_PIN 53   // Pin SDA (SS)
#define RST_PIN 5   // Pin de reset
#define SERVO_PIN 4 // Pin del servomotor
#define CS        49
#define RST        47 // Or set to -1 and connect to Arduino RESET pin
#define DC         48

Adafruit_ST7735 tft = Adafruit_ST7735(CS, DC, RST);
MFRC522 mfrc522(SS_PIN, RST_PIN); // Crear instancia del lector RFID
Servo miServo;  // Instancia del servomotor

// Definir el UID de la tarjeta que habilita el servo
byte UID_Autorizar[] = { 0x39, 0x5A, 0x53, 0xD3 }; // Cambia estos valores con el UID de tu tarjeta
//1A 49 E1 2B
void setup() {
  Serial.begin(9600);     // Iniciar comunicación serial
  SPI.begin();            // Iniciar SPI
  mfrc522.PCD_Init();     // Iniciar el RC522
  miServo.attach(SERVO_PIN); // Conectar el servomotor al pin 6
  miServo.write(180);       // Posición inicial del servomotor (puedes ajustar este valor)
  Serial.println("Acerca la tarjeta al lector...");
   tft.initR(INITR_BLACKTAB);
  tft.fillScreen(ST77XX_BLACK);
  delay(500);

}

void loop() {
  tft.fillCircle(64, 80, 64, ST77XX_MAGENTA);
  tft.fillCircle(64, 80, 60, ST77XX_BLACK);
  delay(500);
  tft.setCursor(5, 70);
  tft.setTextColor(ST77XX_WHITE);
  tft.setTextSize(2);
  tft.print("Acerque la  tarjeta");
  delay(2000);
  tft.fillScreen(ST77XX_BLACK);
  // Revisar si hay una tarjeta presente
  if (mfrc522.PICC_IsNewCardPresent()) {
    if (mfrc522.PICC_ReadCardSerial()) {
      Serial.print("UID de la tarjeta: ");
      
      // Leer el UID de la tarjeta
      byte uidLength = mfrc522.uid.size;
      byte cardUID[uidLength];
      
      for (byte i = 0; i < uidLength; i++) {
        cardUID[i] = mfrc522.uid.uidByte[i];
        Serial.print(cardUID[i], HEX);  // Imprimir UID de la tarjeta
        Serial.print(" ");
      }
      Serial.println();
      
      // Comparar el UID leído con el UID autorizado
      if (uidMatches(cardUID, UID_Autorizar, uidLength)) {
        miServo.write(90);
        tft.fillCircle(64, 80, 64, ST77XX_GREEN);
        tft.fillCircle(64, 80, 60, ST77XX_BLACK);
        delay(500);
        tft.setCursor(25, 75);
        tft.setTextColor(ST77XX_GREEN);
        tft.setTextSize(2);
        tft.print("ABIERTO");
        Serial.println("UID autorizado! Activando servomotor...");
        delay(2000);        // Mantén el servo activado durante 2 segundos
        miServo.write(180);
        tft.fillCircle(64, 80, 64, ST77XX_RED);
        tft.fillCircle(64, 80, 60, ST77XX_BLACK);
        delay(500);
        tft.setCursor(25, 75);
        tft.setTextColor(ST77XX_RED);
        tft.setTextSize(2);
        tft.print("CERRADO");
        delay(1000);
      
    
        
      } else {
        Serial.println("UID no autorizado.");
      }
      
      mfrc522.PICC_HaltA(); // Detener la tarjeta
    }
  }
}

// Función para comparar el UID leído con el UID autorizado
bool uidMatches(byte* uid1, byte* uid2, byte length) {
  for (byte i = 0; i < length; i++) {
    if (uid1[i] != uid2[i]) {
      return false;
    }
  }
  return true;

}
